//
// Copyright (c) 2020 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Contributors:
// Emily Jiang


[[configprofile]]
== Config Profile

Config Profile indicates the project phase, such as dev, testing, live, etc.

=== Specify Config Profile

The config profile can be specified via the property `mp.config.profile`, which can be set in any of the configuration sources. The value of the property can contain only characters that are valid for config property names.
This is because the name of the profile is directly stored in the name of the config property. It can be set when starting your application. e.g.

[source, text]
----
java -jar myapp.jar -Dmp.config.profile=testing
----

The value of the property `mp.config.profile` shouldn't be updated after the application is started. It's only read once and will not be updated once the `Config` object is constructed. If the property value of `mp.config.profile` is modified afterwards, the behavior is undefined and any changes to its value made later can be ignored by the implementation.

The value of the property `mp.config.profile` specifies a single active profile. Implementations are free to provide additional mechanisms to support multiple active profiles.
If the property `mp.config.profile` is specified in multiple config sources, the value of the property is determined following the same rules as other configuration properties, which means the value in the config source with the highest ordinal wins.

=== How Config Profile works

==== On Property level
The configuration property that utilizes the Config Profile is called a "profile-specific" property. A "profile-specific" property name consists of the following sequence: `% <profile name>.<original property name>`.

Conforming implementations are required to search for a configuration source with the highest ordinal (priority) that provides either the property name or the "profile-specific" property name.
If the configuration source provides the "profile-specific" name, the value of the "profile-specific" property will be returned. If it doesn't contain the "profile-specific" name, the value of the plain property will be returned.


For instance, a config source can be specified as follows.

[source, text]
----
%dev.vehicle.name=car
%live.vehicle.name=train
%testing.vehicle.name=bike
vehicle.name=lorry
----

A config property associated with the Config Profile can be looked up as shown below.

[source, text]
----
@Inject @ConfigProperty(name="vehicle.name") String vehicleName;
----

[source, text]
----
String vehicleName = ConfigProvider.getConfig().getValue("vehicle.name", String.class);
----

If the property `mp.config.profile` is set to `dev`, the property `%dev.vehicle.name` is the Active Property. An active property overrides the properties in the same config source.
In more details, if `mp.config.profile` is set to `dev`, the property `%dev.vehicle.name` overrides the property `vehicle.name`. The `vehicleName` will be set to `car`.
The properties `%live.vehicle.name` and `%testing.vehicle.name` are inactive config properties and don't override the property `vehicle.name`.

If `mp.config.profile` is set to `live`, the property `%live.vehicle.name` is the active property. The `vehicleName` will be `train`. Similarly, `bike` will be the value of `vehicleName`, if the profile is `testing`.

==== On Config Source level

Config Profile also affects the default config source `microprofile-config.properties`. If multiple config sources exist under the `META-INF` folder on the classpath with the name like `microprofile-config-<profile_name>.properties`,
the config source matching the active profile name will also be loaded on top of the default config source `microprofile-config.properties`. It means if the same property specified in both config sources, the value from the config source
`microprofile-config-<profile_name>.properties` will be used instead. If the property `mp.config.profile` is specified in the `microprofile-config-<profile_name>.properties`, this property will be discarded.

For instance, there are following config sources provided in your application.

```
META-INF\microprofile-config.properties
META-INF\microprofile-config-dev.properties
META-INF\microprofile-config-prod.properties
META-INF\microprofile-config-testing.properties
```
If the property `mp.config.profile` is set to `dev`, the config source `microprofile-config-dev.properties` will be loaded onto the config source of `microprofile-config.properties`.
Similarly, if `mp.config.profile` is set to `prod`, the config source `microprofile-config-prod.properties` will be loaded onto the config source of `microprofile-config.properties`.
However, if `mp.config.profile` is set to `live`, no additional property file will be loaded on the top of `microprofile-config.properties` as the config source `microprofile-config-live.properties` does not exist.
