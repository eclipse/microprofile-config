//
// Copyright (c) 2016-2017 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Contributors:
// Mark Struberg
// Emily Jiang
[[configprovider]]
== Accessing or Creating a certain Configuration


For using Microprofile-Config in a programmatic way the `ConfigProvider` class is the central point to access a configuration.
It allows access to different configurations (represented by a `Config` instance) based on the application in which it is used.
The `ConfigProvider` internally delegates through to the `ConfigProviderResolver` which contains more low-level functionality.

There are 4 different ways to create an `Config` instance:

* In CDI managed components a user can use `@Inject` to access the current application configuration.
  The default and the auto discovered <<configsource,ConfigSources>> will be gathered to form a configuration.

* A factory method `ConfigProvider#getConfig()` to create a `Config` object based on automatically picked up `ConfigSources`
  of the Application identified by the current Thread Context ClassLoader classpath.
  Subsequent calls to this method for a certain Application will return the same `Config` instance.

* A factory method `ConfigProvider#getConfig(ClassLoader forClassLoader)` to create a `Config`   object based on automatically picked up `ConfigSources`
  of the Application identified by the given ClassLoader.
  This can be used if the Thread Context ClassLoader does not represent the correct layer.
  E.g. if you need the Config for a class in a shared EAR lib folder.
  Subsequent calls to this method for a certain Application will return the same `Config` instance.

* A factory method `ConfigProviderResolver#getBuilder()` to create a `ConfigBuilder` object.
The builder has no config sources but with only the default converters added. The `ConfigBuilder` object can be filled manually via `ConfigBuilder#withSources(ConfigSources... sources)`.
   This configuration instance will by default not be shared by the `ConfigProvider`.
  This method is intended be used if a IoC container or any other external Factory can be used to give access to a manually created shared `Config`.

The `Config` object created via builder pattern can be managed as follows:

* A factory method `ConfigProvider#registerConfig(Config config, ClassLoader classloader)` can be used to register a `Config` within the application.
  This configuration instance *will* be shared by `ConfigProvider#getConfig()`.
  Any subsequent call to `ConfigProvider#getConfig()` will return the registered `Config` instance for this application.
  
* A factory method `ConfigProvider#releaseConfig(Config config)` to release the `Config` instance. This will unbind the current `Config` from the application.
The <<configsource, ConfigSources>> that implement the `java.io.Closeable` interface will be properly destroyed.
The <<converter, Converters>> that implement the `java.io.Closeable` interface will be properly destroyed.
Any subsequent call to `ConfigProvider#getConfig()` or `ConfigProvider#getConfig(ClassLoader forClassLoader)` will result in a new `Config` instance.

All methods in the `ConfigProvider`, `ConfigProviderResolver` and `Config` implementations are thread safe and reentrant.

The `Config` instances created via CDI are `Serializable`.

If a `Config` instance is created via `@Inject Config` or `ConfigProvider#getConfig()` or via the builder pattern but later called `ConfigProvider#registerConfig(Config config, Classloader classloader)`, the `Config` instance will be released when the application is closed. 



<<<