//
// Copyright (c) 2016-2017 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Contributors:
// Mark Struberg
// Emily Jiang

[[converter]]
== Converter

For providing typeseafe configuration we need to convert from the configured Strings into target types.
This happens by providing `Converter` s in the `Config`.

=== Built-in Converters

The following `Converter` s are provided by Microprofile-Config by default:

* `boolean` and `Boolean` , values for `true` (case insensitive) "true", "1", "YES", "Y" "ON".
  Any other value will be interpreted as `false`
* `int` and `Integer`
* `long` and `Long`
* `float` and `Float` , a dot '.' is used to separate the fractional digits
* `double` and `Double` , a dot '.' is used to separate the fractional digits
* `Duration`
* `LocalTime`
* `LocalDate`
* `LocalDateTime`
* `OffsetDateTime`
* `OffsetTime`
* `Instant`

All built-in `Converter` have the `@Priority` of `1`.


=== Adding custom Converters

A custom `Converter` must implement the generic interface `org.eclipse.microprofile.config.spi.Converter`.
The Type parameter of the interface is the target type the String is converted to.
You have to register your implementation in a file `/META-INF/services/org.eclipse.microprofile.config.spi.Converter` with the fully qualified class name of the custom implementation.

A custom `Converter` can define a priority with the `@javax.annotation.Priority` annotation.
If a Priority annotation isn't applied, a default priority of 100 is assumed.
The `Config` will use the `Converter` with the highest `Priority` for each target type.

A custom `Converter` for a target type of any of the built-in Converters will overwrite the default Converter.
